
TIM_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003204  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800338c  0800338c  0000438c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033bc  080033bc  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080033bc  080033bc  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080033bc  080033bc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033bc  080033bc  000043bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033c0  080033c0  000043c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080033c4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080033d0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080033d0  00005078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e04  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d5  00000000  00000000  0000de40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0000f518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074c  00000000  00000000  0000fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b054  00000000  00000000  000105dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9cf  00000000  00000000  0002b630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a19c0  00000000  00000000  00036fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d89bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002718  00000000  00000000  000d8a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000db11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003374 	.word	0x08003374

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003374 	.word	0x08003374

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa29 	bl	8000624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f81d 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f91f 	bl	8000418 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001da:	f000 f871 	bl	80002c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  int i = 0;
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80001e2:	2100      	movs	r1, #0
 80001e4:	4809      	ldr	r0, [pc, #36]	@ (800020c <main+0x44>)
 80001e6:	f002 f917 	bl	8002418 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,i);
 80001ea:	4b08      	ldr	r3, [pc, #32]	@ (800020c <main+0x44>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	635a      	str	r2, [r3, #52]	@ 0x34
	  i+=100;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	3364      	adds	r3, #100	@ 0x64
 80001f6:	607b      	str	r3, [r7, #4]
	  if(i > 1999){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80001fe:	db01      	blt.n	8000204 <main+0x3c>
		  i=0;
 8000200:	2300      	movs	r3, #0
 8000202:	607b      	str	r3, [r7, #4]
	  }
	  HAL_Delay(100);
 8000204:	2064      	movs	r0, #100	@ 0x64
 8000206:	f000 fa73 	bl	80006f0 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,i);
 800020a:	e7ee      	b.n	80001ea <main+0x22>
 800020c:	20000028 	.word	0x20000028

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b09c      	sub	sp, #112	@ 0x70
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800021a:	2228      	movs	r2, #40	@ 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f003 f87c 	bl	800331c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000234:	463b      	mov	r3, r7
 8000236:	2234      	movs	r2, #52	@ 0x34
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f003 f86e 	bl	800331c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000240:	2302      	movs	r3, #2
 8000242:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000248:	2310      	movs	r3, #16
 800024a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024c:	2302      	movs	r3, #2
 800024e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000250:	2300      	movs	r3, #0
 8000252:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000254:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000258:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800025e:	4618      	mov	r0, r3
 8000260:	f000 fcc2 	bl	8000be8 <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800026a:	f000 f8ed 	bl	8000448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800027e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000284:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fcba 	bl	8001c04 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000296:	f000 f8d7 	bl	8000448 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800029a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800029e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002a0:	2300      	movs	r3, #0
 80002a2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a4:	463b      	mov	r3, r7
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fe6e 	bl	8001f88 <HAL_RCCEx_PeriphCLKConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002b2:	f000 f8c9 	bl	8000448 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3770      	adds	r7, #112	@ 0x70
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b09a      	sub	sp, #104	@ 0x68
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
 80002f0:	615a      	str	r2, [r3, #20]
 80002f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	222c      	movs	r2, #44	@ 0x2c
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f003 f80e 	bl	800331c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000300:	4b43      	ldr	r3, [pc, #268]	@ (8000410 <MX_TIM1_Init+0x150>)
 8000302:	4a44      	ldr	r2, [pc, #272]	@ (8000414 <MX_TIM1_Init+0x154>)
 8000304:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 41;
 8000306:	4b42      	ldr	r3, [pc, #264]	@ (8000410 <MX_TIM1_Init+0x150>)
 8000308:	2229      	movs	r2, #41	@ 0x29
 800030a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800030c:	4b40      	ldr	r3, [pc, #256]	@ (8000410 <MX_TIM1_Init+0x150>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000312:	4b3f      	ldr	r3, [pc, #252]	@ (8000410 <MX_TIM1_Init+0x150>)
 8000314:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000318:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800031a:	4b3d      	ldr	r3, [pc, #244]	@ (8000410 <MX_TIM1_Init+0x150>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000320:	4b3b      	ldr	r3, [pc, #236]	@ (8000410 <MX_TIM1_Init+0x150>)
 8000322:	2200      	movs	r2, #0
 8000324:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000326:	4b3a      	ldr	r3, [pc, #232]	@ (8000410 <MX_TIM1_Init+0x150>)
 8000328:	2280      	movs	r2, #128	@ 0x80
 800032a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800032c:	4838      	ldr	r0, [pc, #224]	@ (8000410 <MX_TIM1_Init+0x150>)
 800032e:	f001 ffbb 	bl	80022a8 <HAL_TIM_Base_Init>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000338:	f000 f886 	bl	8000448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800033c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000340:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000342:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000346:	4619      	mov	r1, r3
 8000348:	4831      	ldr	r0, [pc, #196]	@ (8000410 <MX_TIM1_Init+0x150>)
 800034a:	f002 fa5f 	bl	800280c <HAL_TIM_ConfigClockSource>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000354:	f000 f878 	bl	8000448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000358:	482d      	ldr	r0, [pc, #180]	@ (8000410 <MX_TIM1_Init+0x150>)
 800035a:	f001 fffc 	bl	8002356 <HAL_TIM_PWM_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000364:	f000 f870 	bl	8000448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000368:	2300      	movs	r3, #0
 800036a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800036c:	2300      	movs	r3, #0
 800036e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000370:	2300      	movs	r3, #0
 8000372:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000374:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000378:	4619      	mov	r1, r3
 800037a:	4825      	ldr	r0, [pc, #148]	@ (8000410 <MX_TIM1_Init+0x150>)
 800037c:	f002 fef0 	bl	8003160 <HAL_TIMEx_MasterConfigSynchronization>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000386:	f000 f85f 	bl	8000448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800038a:	2370      	movs	r3, #112	@ 0x70
 800038c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000392:	2300      	movs	r3, #0
 8000394:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000396:	2300      	movs	r3, #0
 8000398:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800039e:	2300      	movs	r3, #0
 80003a0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003a2:	2300      	movs	r3, #0
 80003a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003aa:	2200      	movs	r2, #0
 80003ac:	4619      	mov	r1, r3
 80003ae:	4818      	ldr	r0, [pc, #96]	@ (8000410 <MX_TIM1_Init+0x150>)
 80003b0:	f002 f918 	bl	80025e4 <HAL_TIM_PWM_ConfigChannel>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80003ba:	f000 f845 	bl	8000448 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003be:	2300      	movs	r3, #0
 80003c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003dc:	2300      	movs	r3, #0
 80003de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80003e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003ea:	2300      	movs	r3, #0
 80003ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	4619      	mov	r1, r3
 80003f2:	4807      	ldr	r0, [pc, #28]	@ (8000410 <MX_TIM1_Init+0x150>)
 80003f4:	f002 ff1a 	bl	800322c <HAL_TIMEx_ConfigBreakDeadTime>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80003fe:	f000 f823 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000402:	4803      	ldr	r0, [pc, #12]	@ (8000410 <MX_TIM1_Init+0x150>)
 8000404:	f000 f86a 	bl	80004dc <HAL_TIM_MspPostInit>

}
 8000408:	bf00      	nop
 800040a:	3768      	adds	r7, #104	@ 0x68
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000028 	.word	0x20000028
 8000414:	40012c00 	.word	0x40012c00

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <MX_GPIO_Init+0x2c>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a08      	ldr	r2, [pc, #32]	@ (8000444 <MX_GPIO_Init+0x2c>)
 8000424:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <MX_GPIO_Init+0x2c>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	bf00      	nop
 8000452:	e7fd      	b.n	8000450 <Error_Handler+0x8>

08000454 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045a:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <HAL_MspInit+0x44>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a0e      	ldr	r2, [pc, #56]	@ (8000498 <HAL_MspInit+0x44>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <HAL_MspInit+0x44>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <HAL_MspInit+0x44>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a08      	ldr	r2, [pc, #32]	@ (8000498 <HAL_MspInit+0x44>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <HAL_MspInit+0x44>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a0a      	ldr	r2, [pc, #40]	@ (80004d4 <HAL_TIM_Base_MspInit+0x38>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d10b      	bne.n	80004c6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80004ae:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <HAL_TIM_Base_MspInit+0x3c>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	4a09      	ldr	r2, [pc, #36]	@ (80004d8 <HAL_TIM_Base_MspInit+0x3c>)
 80004b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004b8:	6193      	str	r3, [r2, #24]
 80004ba:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <HAL_TIM_Base_MspInit+0x3c>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40012c00 	.word	0x40012c00
 80004d8:	40021000 	.word	0x40021000

080004dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a11      	ldr	r2, [pc, #68]	@ (8000540 <HAL_TIM_MspPostInit+0x64>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d11b      	bne.n	8000536 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <HAL_TIM_MspPostInit+0x68>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a10      	ldr	r2, [pc, #64]	@ (8000544 <HAL_TIM_MspPostInit+0x68>)
 8000504:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <HAL_TIM_MspPostInit+0x68>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000516:	2301      	movs	r3, #1
 8000518:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051a:	2302      	movs	r3, #2
 800051c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000526:	2302      	movs	r3, #2
 8000528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	4619      	mov	r1, r3
 8000530:	4805      	ldr	r0, [pc, #20]	@ (8000548 <HAL_TIM_MspPostInit+0x6c>)
 8000532:	f000 f9e7 	bl	8000904 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000536:	bf00      	nop
 8000538:	3720      	adds	r7, #32
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40012c00 	.word	0x40012c00
 8000544:	40021000 	.word	0x40021000
 8000548:	48000800 	.word	0x48000800

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <NMI_Handler+0x4>

08000554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <HardFault_Handler+0x4>

0800055c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <MemManage_Handler+0x4>

08000564 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <UsageFault_Handler+0x4>

08000574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a2:	f000 f885 	bl	80006b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <SystemInit+0x20>)
 80005b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005b6:	4a05      	ldr	r2, [pc, #20]	@ (80005cc <SystemInit+0x20>)
 80005b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000608 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d4:	f7ff ffea 	bl	80005ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005da:	490d      	ldr	r1, [pc, #52]	@ (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f0:	4c0a      	ldr	r4, [pc, #40]	@ (800061c <LoopForever+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fe:	f002 fe95 	bl	800332c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000602:	f7ff fde1 	bl	80001c8 <main>

08000606 <LoopForever>:

LoopForever:
    b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000608:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000614:	080033c4 	.word	0x080033c4
  ldr r2, =_sbss
 8000618:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800061c:	20000078 	.word	0x20000078

08000620 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC1_IRQHandler>
	...

08000624 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <HAL_Init+0x28>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a07      	ldr	r2, [pc, #28]	@ (800064c <HAL_Init+0x28>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000634:	2003      	movs	r0, #3
 8000636:	f000 f931 	bl	800089c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800063a:	200f      	movs	r0, #15
 800063c:	f000 f808 	bl	8000650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000640:	f7ff ff08 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022000 	.word	0x40022000

08000650 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000658:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <HAL_InitTick+0x54>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <HAL_InitTick+0x58>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000666:	fbb3 f3f1 	udiv	r3, r3, r1
 800066a:	fbb2 f3f3 	udiv	r3, r2, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f93b 	bl	80008ea <HAL_SYSTICK_Config>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800067a:	2301      	movs	r3, #1
 800067c:	e00e      	b.n	800069c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b0f      	cmp	r3, #15
 8000682:	d80a      	bhi.n	800069a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000684:	2200      	movs	r2, #0
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	f04f 30ff 	mov.w	r0, #4294967295
 800068c:	f000 f911 	bl	80008b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000690:	4a06      	ldr	r2, [pc, #24]	@ (80006ac <HAL_InitTick+0x5c>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000696:	2300      	movs	r3, #0
 8000698:	e000      	b.n	800069c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000004 	.word	0x20000004

080006b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <HAL_IncTick+0x20>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <HAL_IncTick+0x24>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <HAL_IncTick+0x24>)
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000074 	.word	0x20000074

080006d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;  
 80006dc:	4b03      	ldr	r3, [pc, #12]	@ (80006ec <HAL_GetTick+0x14>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000074 	.word	0x20000074

080006f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f8:	f7ff ffee 	bl	80006d8 <HAL_GetTick>
 80006fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000708:	d005      	beq.n	8000716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070a:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <HAL_Delay+0x44>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4413      	add	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000716:	bf00      	nop
 8000718:	f7ff ffde 	bl	80006d8 <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	429a      	cmp	r2, r3
 8000726:	d8f7      	bhi.n	8000718 <HAL_Delay+0x28>
  {
  }
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000008 	.word	0x20000008

08000738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000760:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076a:	4a04      	ldr	r2, [pc, #16]	@ (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	60d3      	str	r3, [r2, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <__NVIC_GetPriorityGrouping+0x18>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	f003 0307 	and.w	r3, r3, #7
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db0a      	blt.n	80007c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	490c      	ldr	r1, [pc, #48]	@ (80007e8 <__NVIC_SetPriority+0x4c>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c4:	e00a      	b.n	80007dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4908      	ldr	r1, [pc, #32]	@ (80007ec <__NVIC_SetPriority+0x50>)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	3b04      	subs	r3, #4
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	440b      	add	r3, r1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b089      	sub	sp, #36	@ 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	f1c3 0307 	rsb	r3, r3, #7
 800080a:	2b04      	cmp	r3, #4
 800080c:	bf28      	it	cs
 800080e:	2304      	movcs	r3, #4
 8000810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3304      	adds	r3, #4
 8000816:	2b06      	cmp	r3, #6
 8000818:	d902      	bls.n	8000820 <NVIC_EncodePriority+0x30>
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3b03      	subs	r3, #3
 800081e:	e000      	b.n	8000822 <NVIC_EncodePriority+0x32>
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43da      	mvns	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	401a      	ands	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000838:	f04f 31ff 	mov.w	r1, #4294967295
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43d9      	mvns	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	4313      	orrs	r3, r2
         );
}
 800084a:	4618      	mov	r0, r3
 800084c:	3724      	adds	r7, #36	@ 0x24
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000868:	d301      	bcc.n	800086e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086a:	2301      	movs	r3, #1
 800086c:	e00f      	b.n	800088e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086e:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <SysTick_Config+0x40>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000876:	210f      	movs	r1, #15
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f7ff ff8e 	bl	800079c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000880:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <SysTick_Config+0x40>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000886:	4b04      	ldr	r3, [pc, #16]	@ (8000898 <SysTick_Config+0x40>)
 8000888:	2207      	movs	r2, #7
 800088a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	e000e010 	.word	0xe000e010

0800089c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ff47 	bl	8000738 <__NVIC_SetPriorityGrouping>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c4:	f7ff ff5c 	bl	8000780 <__NVIC_GetPriorityGrouping>
 80008c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	6978      	ldr	r0, [r7, #20]
 80008d0:	f7ff ff8e 	bl	80007f0 <NVIC_EncodePriority>
 80008d4:	4602      	mov	r2, r0
 80008d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008da:	4611      	mov	r1, r2
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff5d 	bl	800079c <__NVIC_SetPriority>
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffb0 	bl	8000858 <SysTick_Config>
 80008f8:	4603      	mov	r3, r0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000912:	e14e      	b.n	8000bb2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	2101      	movs	r1, #1
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	fa01 f303 	lsl.w	r3, r1, r3
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	f000 8140 	beq.w	8000bac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	2b01      	cmp	r3, #1
 8000936:	d005      	beq.n	8000944 <HAL_GPIO_Init+0x40>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0303 	and.w	r3, r3, #3
 8000940:	2b02      	cmp	r3, #2
 8000942:	d130      	bne.n	80009a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2203      	movs	r2, #3
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68da      	ldr	r2, [r3, #12]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4313      	orrs	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800097a:	2201      	movs	r2, #1
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	091b      	lsrs	r3, r3, #4
 8000990:	f003 0201 	and.w	r2, r3, #1
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d017      	beq.n	80009e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	2203      	movs	r2, #3
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f003 0303 	and.w	r3, r3, #3
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d123      	bne.n	8000a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	08da      	lsrs	r2, r3, #3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3208      	adds	r2, #8
 80009f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	220f      	movs	r2, #15
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	691a      	ldr	r2, [r3, #16]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	f003 0307 	and.w	r3, r3, #7
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	08da      	lsrs	r2, r3, #3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3208      	adds	r2, #8
 8000a30:	6939      	ldr	r1, [r7, #16]
 8000a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2203      	movs	r2, #3
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 0203 	and.w	r2, r3, #3
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 809a 	beq.w	8000bac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a78:	4b55      	ldr	r3, [pc, #340]	@ (8000bd0 <HAL_GPIO_Init+0x2cc>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a54      	ldr	r2, [pc, #336]	@ (8000bd0 <HAL_GPIO_Init+0x2cc>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b52      	ldr	r3, [pc, #328]	@ (8000bd0 <HAL_GPIO_Init+0x2cc>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a90:	4a50      	ldr	r2, [pc, #320]	@ (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3302      	adds	r3, #2
 8000a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000aba:	d013      	beq.n	8000ae4 <HAL_GPIO_Init+0x1e0>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a46      	ldr	r2, [pc, #280]	@ (8000bd8 <HAL_GPIO_Init+0x2d4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d00d      	beq.n	8000ae0 <HAL_GPIO_Init+0x1dc>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a45      	ldr	r2, [pc, #276]	@ (8000bdc <HAL_GPIO_Init+0x2d8>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d007      	beq.n	8000adc <HAL_GPIO_Init+0x1d8>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a44      	ldr	r2, [pc, #272]	@ (8000be0 <HAL_GPIO_Init+0x2dc>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d101      	bne.n	8000ad8 <HAL_GPIO_Init+0x1d4>
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	e006      	b.n	8000ae6 <HAL_GPIO_Init+0x1e2>
 8000ad8:	2305      	movs	r3, #5
 8000ada:	e004      	b.n	8000ae6 <HAL_GPIO_Init+0x1e2>
 8000adc:	2302      	movs	r3, #2
 8000ade:	e002      	b.n	8000ae6 <HAL_GPIO_Init+0x1e2>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e000      	b.n	8000ae6 <HAL_GPIO_Init+0x1e2>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	f002 0203 	and.w	r2, r2, #3
 8000aec:	0092      	lsls	r2, r2, #2
 8000aee:	4093      	lsls	r3, r2
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000af6:	4937      	ldr	r1, [pc, #220]	@ (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	3302      	adds	r3, #2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b04:	4b37      	ldr	r3, [pc, #220]	@ (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b28:	4a2e      	ldr	r2, [pc, #184]	@ (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b52:	4a24      	ldr	r2, [pc, #144]	@ (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b58:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b7c:	4a19      	ldr	r2, [pc, #100]	@ (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b82:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f47f aea9 	bne.w	8000914 <HAL_GPIO_Init+0x10>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	371c      	adds	r7, #28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010000 	.word	0x40010000
 8000bd8:	48000400 	.word	0x48000400
 8000bdc:	48000800 	.word	0x48000800
 8000be0:	48000c00 	.word	0x48000c00
 8000be4:	40010400 	.word	0x40010400

08000be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bf4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000bf8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f000 bff4 	b.w	8001bf6 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 816d 	beq.w	8000efe <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c24:	4bb4      	ldr	r3, [pc, #720]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 030c 	and.w	r3, r3, #12
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d00c      	beq.n	8000c4a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c30:	4bb1      	ldr	r3, [pc, #708]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 030c 	and.w	r3, r3, #12
 8000c38:	2b08      	cmp	r3, #8
 8000c3a:	d157      	bne.n	8000cec <HAL_RCC_OscConfig+0x104>
 8000c3c:	4bae      	ldr	r3, [pc, #696]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c48:	d150      	bne.n	8000cec <HAL_RCC_OscConfig+0x104>
 8000c4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c4e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c52:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000c56:	fa93 f3a3 	rbit	r3, r3
 8000c5a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c5e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c62:	fab3 f383 	clz	r3, r3
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c6a:	d802      	bhi.n	8000c72 <HAL_RCC_OscConfig+0x8a>
 8000c6c:	4ba2      	ldr	r3, [pc, #648]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	e015      	b.n	8000c9e <HAL_RCC_OscConfig+0xb6>
 8000c72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c76:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c7a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000c7e:	fa93 f3a3 	rbit	r3, r3
 8000c82:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000c86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c8a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000c8e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000c92:	fa93 f3a3 	rbit	r3, r3
 8000c96:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000c9a:	4b97      	ldr	r3, [pc, #604]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ca2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000ca6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000caa:	fa92 f2a2 	rbit	r2, r2
 8000cae:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000cb2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000cb6:	fab2 f282 	clz	r2, r2
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	f042 0220 	orr.w	r2, r2, #32
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	f002 021f 	and.w	r2, r2, #31
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 8114 	beq.w	8000efc <HAL_RCC_OscConfig+0x314>
 8000cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f040 810b 	bne.w	8000efc <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	f000 bf85 	b.w	8001bf6 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cf0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cfc:	d106      	bne.n	8000d0c <HAL_RCC_OscConfig+0x124>
 8000cfe:	4b7e      	ldr	r3, [pc, #504]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a7d      	ldr	r2, [pc, #500]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e036      	b.n	8000d7a <HAL_RCC_OscConfig+0x192>
 8000d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d10c      	bne.n	8000d36 <HAL_RCC_OscConfig+0x14e>
 8000d1c:	4b76      	ldr	r3, [pc, #472]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a75      	ldr	r2, [pc, #468]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	4b73      	ldr	r3, [pc, #460]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a72      	ldr	r2, [pc, #456]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	e021      	b.n	8000d7a <HAL_RCC_OscConfig+0x192>
 8000d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d46:	d10c      	bne.n	8000d62 <HAL_RCC_OscConfig+0x17a>
 8000d48:	4b6b      	ldr	r3, [pc, #428]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b68      	ldr	r3, [pc, #416]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a67      	ldr	r2, [pc, #412]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e00b      	b.n	8000d7a <HAL_RCC_OscConfig+0x192>
 8000d62:	4b65      	ldr	r3, [pc, #404]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a64      	ldr	r2, [pc, #400]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	4b62      	ldr	r3, [pc, #392]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a61      	ldr	r2, [pc, #388]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d78:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d7e:	f023 020f 	bic.w	r2, r3, #15
 8000d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	495a      	ldr	r1, [pc, #360]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000d90:	4313      	orrs	r3, r2
 8000d92:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d054      	beq.n	8000e4e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fc98 	bl	80006d8 <HAL_GetTick>
 8000da8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dac:	e00a      	b.n	8000dc4 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dae:	f7ff fc93 	bl	80006d8 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b64      	cmp	r3, #100	@ 0x64
 8000dbc:	d902      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	f000 bf19 	b.w	8001bf6 <HAL_RCC_OscConfig+0x100e>
 8000dc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dc8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dcc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000dd0:	fa93 f3a3 	rbit	r3, r3
 8000dd4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000dd8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ddc:	fab3 f383 	clz	r3, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000de4:	d802      	bhi.n	8000dec <HAL_RCC_OscConfig+0x204>
 8000de6:	4b44      	ldr	r3, [pc, #272]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	e015      	b.n	8000e18 <HAL_RCC_OscConfig+0x230>
 8000dec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000df0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000e00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e04:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000e08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000e0c:	fa93 f3a3 	rbit	r3, r3
 8000e10:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000e14:	4b38      	ldr	r3, [pc, #224]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e1c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000e20:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000e24:	fa92 f2a2 	rbit	r2, r2
 8000e28:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000e2c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	f042 0220 	orr.w	r2, r2, #32
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	f002 021f 	and.w	r2, r2, #31
 8000e40:	2101      	movs	r1, #1
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0b0      	beq.n	8000dae <HAL_RCC_OscConfig+0x1c6>
 8000e4c:	e057      	b.n	8000efe <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4e:	f7ff fc43 	bl	80006d8 <HAL_GetTick>
 8000e52:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e56:	e00a      	b.n	8000e6e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e58:	f7ff fc3e 	bl	80006d8 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b64      	cmp	r3, #100	@ 0x64
 8000e66:	d902      	bls.n	8000e6e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	f000 bec4 	b.w	8001bf6 <HAL_RCC_OscConfig+0x100e>
 8000e6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e72:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e76:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000e7a:	fa93 f3a3 	rbit	r3, r3
 8000e7e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000e82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e86:	fab3 f383 	clz	r3, r3
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e8e:	d802      	bhi.n	8000e96 <HAL_RCC_OscConfig+0x2ae>
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	e015      	b.n	8000ec2 <HAL_RCC_OscConfig+0x2da>
 8000e96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e9a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000ea2:	fa93 f3a3 	rbit	r3, r3
 8000ea6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000eaa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eae:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000eb2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000eb6:	fa93 f3a3 	rbit	r3, r3
 8000eba:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_RCC_OscConfig+0x310>)
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ec6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000eca:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000ece:	fa92 f2a2 	rbit	r2, r2
 8000ed2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000ed6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000eda:	fab2 f282 	clz	r2, r2
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	f042 0220 	orr.w	r2, r2, #32
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	f002 021f 	and.w	r2, r2, #31
 8000eea:	2101      	movs	r1, #1
 8000eec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1b0      	bne.n	8000e58 <HAL_RCC_OscConfig+0x270>
 8000ef6:	e002      	b.n	8000efe <HAL_RCC_OscConfig+0x316>
 8000ef8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 816c 	beq.w	80011ec <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f14:	4bcc      	ldr	r3, [pc, #816]	@ (8001248 <HAL_RCC_OscConfig+0x660>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00b      	beq.n	8000f38 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f20:	4bc9      	ldr	r3, [pc, #804]	@ (8001248 <HAL_RCC_OscConfig+0x660>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d16d      	bne.n	8001008 <HAL_RCC_OscConfig+0x420>
 8000f2c:	4bc6      	ldr	r3, [pc, #792]	@ (8001248 <HAL_RCC_OscConfig+0x660>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d167      	bne.n	8001008 <HAL_RCC_OscConfig+0x420>
 8000f38:	2302      	movs	r3, #2
 8000f3a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000f42:	fa93 f3a3 	rbit	r3, r3
 8000f46:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000f4a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f4e:	fab3 f383 	clz	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f56:	d802      	bhi.n	8000f5e <HAL_RCC_OscConfig+0x376>
 8000f58:	4bbb      	ldr	r3, [pc, #748]	@ (8001248 <HAL_RCC_OscConfig+0x660>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	e013      	b.n	8000f86 <HAL_RCC_OscConfig+0x39e>
 8000f5e:	2302      	movs	r3, #2
 8000f60:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f64:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000f68:	fa93 f3a3 	rbit	r3, r3
 8000f6c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000f76:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000f7a:	fa93 f3a3 	rbit	r3, r3
 8000f7e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000f82:	4bb1      	ldr	r3, [pc, #708]	@ (8001248 <HAL_RCC_OscConfig+0x660>)
 8000f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f86:	2202      	movs	r2, #2
 8000f88:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8000f8c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000f90:	fa92 f2a2 	rbit	r2, r2
 8000f94:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8000f98:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8000f9c:	fab2 f282 	clz	r2, r2
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	f042 0220 	orr.w	r2, r2, #32
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	f002 021f 	and.w	r2, r2, #31
 8000fac:	2101      	movs	r1, #1
 8000fae:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00a      	beq.n	8000fce <HAL_RCC_OscConfig+0x3e6>
 8000fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d002      	beq.n	8000fce <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	f000 be14 	b.w	8001bf6 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fce:	4b9e      	ldr	r3, [pc, #632]	@ (8001248 <HAL_RCC_OscConfig+0x660>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	21f8      	movs	r1, #248	@ 0xf8
 8000fe4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000fec:	fa91 f1a1 	rbit	r1, r1
 8000ff0:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8000ff4:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8000ff8:	fab1 f181 	clz	r1, r1
 8000ffc:	b2c9      	uxtb	r1, r1
 8000ffe:	408b      	lsls	r3, r1
 8001000:	4991      	ldr	r1, [pc, #580]	@ (8001248 <HAL_RCC_OscConfig+0x660>)
 8001002:	4313      	orrs	r3, r2
 8001004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001006:	e0f1      	b.n	80011ec <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800100c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 8083 	beq.w	8001120 <HAL_RCC_OscConfig+0x538>
 800101a:	2301      	movs	r3, #1
 800101c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001020:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001024:	fa93 f3a3 	rbit	r3, r3
 8001028:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800102c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001030:	fab3 f383 	clz	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800103a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	461a      	mov	r2, r3
 8001042:	2301      	movs	r3, #1
 8001044:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001046:	f7ff fb47 	bl	80006d8 <HAL_GetTick>
 800104a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104e:	e00a      	b.n	8001066 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001050:	f7ff fb42 	bl	80006d8 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d902      	bls.n	8001066 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	f000 bdc8 	b.w	8001bf6 <HAL_RCC_OscConfig+0x100e>
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001070:	fa93 f3a3 	rbit	r3, r3
 8001074:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001078:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b3f      	cmp	r3, #63	@ 0x3f
 8001084:	d802      	bhi.n	800108c <HAL_RCC_OscConfig+0x4a4>
 8001086:	4b70      	ldr	r3, [pc, #448]	@ (8001248 <HAL_RCC_OscConfig+0x660>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	e013      	b.n	80010b4 <HAL_RCC_OscConfig+0x4cc>
 800108c:	2302      	movs	r3, #2
 800108e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001092:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001096:	fa93 f3a3 	rbit	r3, r3
 800109a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800109e:	2302      	movs	r3, #2
 80010a0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80010a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80010a8:	fa93 f3a3 	rbit	r3, r3
 80010ac:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80010b0:	4b65      	ldr	r3, [pc, #404]	@ (8001248 <HAL_RCC_OscConfig+0x660>)
 80010b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b4:	2202      	movs	r2, #2
 80010b6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80010ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80010be:	fa92 f2a2 	rbit	r2, r2
 80010c2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80010c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80010ca:	fab2 f282 	clz	r2, r2
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	f042 0220 	orr.w	r2, r2, #32
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	f002 021f 	and.w	r2, r2, #31
 80010da:	2101      	movs	r1, #1
 80010dc:	fa01 f202 	lsl.w	r2, r1, r2
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0b4      	beq.n	8001050 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4b58      	ldr	r3, [pc, #352]	@ (8001248 <HAL_RCC_OscConfig+0x660>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	21f8      	movs	r1, #248	@ 0xf8
 80010fc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001100:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001104:	fa91 f1a1 	rbit	r1, r1
 8001108:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800110c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001110:	fab1 f181 	clz	r1, r1
 8001114:	b2c9      	uxtb	r1, r1
 8001116:	408b      	lsls	r3, r1
 8001118:	494b      	ldr	r1, [pc, #300]	@ (8001248 <HAL_RCC_OscConfig+0x660>)
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
 800111e:	e065      	b.n	80011ec <HAL_RCC_OscConfig+0x604>
 8001120:	2301      	movs	r3, #1
 8001122:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001132:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001140:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	461a      	mov	r2, r3
 8001148:	2300      	movs	r3, #0
 800114a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fac4 	bl	80006d8 <HAL_GetTick>
 8001150:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001156:	f7ff fabf 	bl	80006d8 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d902      	bls.n	800116c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	f000 bd45 	b.w	8001bf6 <HAL_RCC_OscConfig+0x100e>
 800116c:	2302      	movs	r3, #2
 800116e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800117e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b3f      	cmp	r3, #63	@ 0x3f
 800118a:	d802      	bhi.n	8001192 <HAL_RCC_OscConfig+0x5aa>
 800118c:	4b2e      	ldr	r3, [pc, #184]	@ (8001248 <HAL_RCC_OscConfig+0x660>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	e013      	b.n	80011ba <HAL_RCC_OscConfig+0x5d2>
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001198:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800119c:	fa93 f3a3 	rbit	r3, r3
 80011a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80011a4:	2302      	movs	r3, #2
 80011a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80011aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80011ae:	fa93 f3a3 	rbit	r3, r3
 80011b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80011b6:	4b24      	ldr	r3, [pc, #144]	@ (8001248 <HAL_RCC_OscConfig+0x660>)
 80011b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ba:	2202      	movs	r2, #2
 80011bc:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80011c0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80011c4:	fa92 f2a2 	rbit	r2, r2
 80011c8:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80011cc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80011d0:	fab2 f282 	clz	r2, r2
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	f042 0220 	orr.w	r2, r2, #32
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	f002 021f 	and.w	r2, r2, #31
 80011e0:	2101      	movs	r1, #1
 80011e2:	fa01 f202 	lsl.w	r2, r1, r2
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1b4      	bne.n	8001156 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 8115 	beq.w	800142c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001206:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d07e      	beq.n	8001310 <HAL_RCC_OscConfig+0x728>
 8001212:	2301      	movs	r3, #1
 8001214:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001228:	fab3 f383 	clz	r3, r3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_RCC_OscConfig+0x664>)
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	461a      	mov	r2, r3
 8001238:	2301      	movs	r3, #1
 800123a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123c:	f7ff fa4c 	bl	80006d8 <HAL_GetTick>
 8001240:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001244:	e00f      	b.n	8001266 <HAL_RCC_OscConfig+0x67e>
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000
 800124c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001250:	f7ff fa42 	bl	80006d8 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d902      	bls.n	8001266 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	f000 bcc8 	b.w	8001bf6 <HAL_RCC_OscConfig+0x100e>
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800127c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001280:	2202      	movs	r2, #2
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001288:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	fa93 f2a3 	rbit	r2, r3
 8001292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001296:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012a4:	2202      	movs	r2, #2
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	fa93 f2a3 	rbit	r2, r3
 80012b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c0:	4bb0      	ldr	r3, [pc, #704]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 80012c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012cc:	2102      	movs	r1, #2
 80012ce:	6019      	str	r1, [r3, #0]
 80012d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	fa93 f1a3 	rbit	r1, r3
 80012de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80012e6:	6019      	str	r1, [r3, #0]
  return result;
 80012e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	2101      	movs	r1, #1
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0a0      	beq.n	8001250 <HAL_RCC_OscConfig+0x668>
 800130e:	e08d      	b.n	800142c <HAL_RCC_OscConfig+0x844>
 8001310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001314:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001320:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	fa93 f2a3 	rbit	r2, r3
 800132a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800132e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001332:	601a      	str	r2, [r3, #0]
  return result;
 8001334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001338:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800133c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	4b90      	ldr	r3, [pc, #576]	@ (8001588 <HAL_RCC_OscConfig+0x9a0>)
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	461a      	mov	r2, r3
 800134e:	2300      	movs	r3, #0
 8001350:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001352:	f7ff f9c1 	bl	80006d8 <HAL_GetTick>
 8001356:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135a:	e00a      	b.n	8001372 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135c:	f7ff f9bc 	bl	80006d8 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d902      	bls.n	8001372 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	f000 bc42 	b.w	8001bf6 <HAL_RCC_OscConfig+0x100e>
 8001372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001376:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800137a:	2202      	movs	r2, #2
 800137c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001382:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	fa93 f2a3 	rbit	r2, r3
 800138c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001390:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800139a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800139e:	2202      	movs	r2, #2
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	fa93 f2a3 	rbit	r2, r3
 80013b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013c2:	2202      	movs	r2, #2
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	fa93 f2a3 	rbit	r2, r3
 80013d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013de:	4b69      	ldr	r3, [pc, #420]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 80013e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80013ea:	2102      	movs	r1, #2
 80013ec:	6019      	str	r1, [r3, #0]
 80013ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	fa93 f1a3 	rbit	r1, r3
 80013fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001400:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001404:	6019      	str	r1, [r3, #0]
  return result;
 8001406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	fab3 f383 	clz	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	2101      	movs	r1, #1
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	4013      	ands	r3, r2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d197      	bne.n	800135c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800142c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001430:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 819e 	beq.w	800177e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001448:	4b4e      	ldr	r3, [pc, #312]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d116      	bne.n	8001482 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001454:	4b4b      	ldr	r3, [pc, #300]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	4a4a      	ldr	r2, [pc, #296]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 800145a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800145e:	61d3      	str	r3, [r2, #28]
 8001460:	4b48      	ldr	r3, [pc, #288]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800146c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001476:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800147a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800147c:	2301      	movs	r3, #1
 800147e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001482:	4b42      	ldr	r3, [pc, #264]	@ (800158c <HAL_RCC_OscConfig+0x9a4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148a:	2b00      	cmp	r3, #0
 800148c:	d11a      	bne.n	80014c4 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148e:	4b3f      	ldr	r3, [pc, #252]	@ (800158c <HAL_RCC_OscConfig+0x9a4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a3e      	ldr	r2, [pc, #248]	@ (800158c <HAL_RCC_OscConfig+0x9a4>)
 8001494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001498:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149a:	f7ff f91d 	bl	80006d8 <HAL_GetTick>
 800149e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	e009      	b.n	80014b8 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a4:	f7ff f918 	bl	80006d8 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b64      	cmp	r3, #100	@ 0x64
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e39e      	b.n	8001bf6 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	4b34      	ldr	r3, [pc, #208]	@ (800158c <HAL_RCC_OscConfig+0x9a4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0ef      	beq.n	80014a4 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x8fa>
 80014d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6213      	str	r3, [r2, #32]
 80014e0:	e035      	b.n	800154e <HAL_RCC_OscConfig+0x966>
 80014e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x924>
 80014f2:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4a23      	ldr	r2, [pc, #140]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6213      	str	r3, [r2, #32]
 80014fe:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	4a20      	ldr	r2, [pc, #128]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 8001504:	f023 0304 	bic.w	r3, r3, #4
 8001508:	6213      	str	r3, [r2, #32]
 800150a:	e020      	b.n	800154e <HAL_RCC_OscConfig+0x966>
 800150c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001510:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b05      	cmp	r3, #5
 800151a:	d10c      	bne.n	8001536 <HAL_RCC_OscConfig+0x94e>
 800151c:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4a18      	ldr	r2, [pc, #96]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	6213      	str	r3, [r2, #32]
 8001528:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a15      	ldr	r2, [pc, #84]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6213      	str	r3, [r2, #32]
 8001534:	e00b      	b.n	800154e <HAL_RCC_OscConfig+0x966>
 8001536:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	6213      	str	r3, [r2, #32]
 8001542:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a0f      	ldr	r2, [pc, #60]	@ (8001584 <HAL_RCC_OscConfig+0x99c>)
 8001548:	f023 0304 	bic.w	r3, r3, #4
 800154c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800154e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001552:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8087 	beq.w	800166e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff f8ba 	bl	80006d8 <HAL_GetTick>
 8001564:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	e012      	b.n	8001590 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff f8b5 	bl	80006d8 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d908      	bls.n	8001590 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e339      	b.n	8001bf6 <HAL_RCC_OscConfig+0x100e>
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	10908120 	.word	0x10908120
 800158c:	40007000 	.word	0x40007000
 8001590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001594:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001598:	2202      	movs	r2, #2
 800159a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	fa93 f2a3 	rbit	r2, r3
 80015aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80015bc:	2202      	movs	r2, #2
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	fa93 f2a3 	rbit	r2, r3
 80015ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80015d6:	601a      	str	r2, [r3, #0]
  return result;
 80015d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015dc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80015e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <HAL_RCC_OscConfig+0xa10>
 80015f2:	4b98      	ldr	r3, [pc, #608]	@ (8001854 <HAL_RCC_OscConfig+0xc6c>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	e013      	b.n	8001620 <HAL_RCC_OscConfig+0xa38>
 80015f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001600:	2202      	movs	r2, #2
 8001602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001608:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	fa93 f2a3 	rbit	r2, r3
 8001612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001616:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	4b8d      	ldr	r3, [pc, #564]	@ (8001854 <HAL_RCC_OscConfig+0xc6c>)
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001624:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001628:	2102      	movs	r1, #2
 800162a:	6011      	str	r1, [r2, #0]
 800162c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001630:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	fa92 f1a2 	rbit	r1, r2
 800163a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800163e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001642:	6011      	str	r1, [r2, #0]
  return result;
 8001644:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001648:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	fab2 f282 	clz	r2, r2
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	f002 021f 	and.w	r2, r2, #31
 800165e:	2101      	movs	r1, #1
 8001660:	fa01 f202 	lsl.w	r2, r1, r2
 8001664:	4013      	ands	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	f43f af7f 	beq.w	800156a <HAL_RCC_OscConfig+0x982>
 800166c:	e07d      	b.n	800176a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166e:	f7ff f833 	bl	80006d8 <HAL_GetTick>
 8001672:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff f82e 	bl	80006d8 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e2b2      	b.n	8001bf6 <HAL_RCC_OscConfig+0x100e>
 8001690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001694:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001698:	2202      	movs	r2, #2
 800169a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	fa93 f2a3 	rbit	r2, r3
 80016aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ae:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80016bc:	2202      	movs	r2, #2
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fa93 f2a3 	rbit	r2, r3
 80016ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80016d6:	601a      	str	r2, [r3, #0]
  return result;
 80016d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016dc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80016e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e2:	fab3 f383 	clz	r3, r3
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <HAL_RCC_OscConfig+0xb10>
 80016f2:	4b58      	ldr	r3, [pc, #352]	@ (8001854 <HAL_RCC_OscConfig+0xc6c>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	e013      	b.n	8001720 <HAL_RCC_OscConfig+0xb38>
 80016f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016fc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001700:	2202      	movs	r2, #2
 8001702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001708:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	fa93 f2a3 	rbit	r2, r3
 8001712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001716:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	4b4d      	ldr	r3, [pc, #308]	@ (8001854 <HAL_RCC_OscConfig+0xc6c>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001724:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001728:	2102      	movs	r1, #2
 800172a:	6011      	str	r1, [r2, #0]
 800172c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001730:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	fa92 f1a2 	rbit	r1, r2
 800173a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800173e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001742:	6011      	str	r1, [r2, #0]
  return result;
 8001744:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001748:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	fab2 f282 	clz	r2, r2
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	f002 021f 	and.w	r2, r2, #31
 800175e:	2101      	movs	r1, #1
 8001760:	fa01 f202 	lsl.w	r2, r1, r2
 8001764:	4013      	ands	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d186      	bne.n	8001678 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800176a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800176e:	2b01      	cmp	r3, #1
 8001770:	d105      	bne.n	800177e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001772:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <HAL_RCC_OscConfig+0xc6c>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a37      	ldr	r2, [pc, #220]	@ (8001854 <HAL_RCC_OscConfig+0xc6c>)
 8001778:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800177c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001782:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8232 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001790:	4b30      	ldr	r3, [pc, #192]	@ (8001854 <HAL_RCC_OscConfig+0xc6c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	2b08      	cmp	r3, #8
 800179a:	f000 8201 	beq.w	8001ba0 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800179e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	f040 8157 	bne.w	8001a5e <HAL_RCC_OscConfig+0xe76>
 80017b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80017b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	fa93 f2a3 	rbit	r2, r3
 80017cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80017d4:	601a      	str	r2, [r3, #0]
  return result;
 80017d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017da:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80017de:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80017ea:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	461a      	mov	r2, r3
 80017f2:	2300      	movs	r3, #0
 80017f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7fe ff6f 	bl	80006d8 <HAL_GetTick>
 80017fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fe:	e009      	b.n	8001814 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001800:	f7fe ff6a 	bl	80006d8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1f0      	b.n	8001bf6 <HAL_RCC_OscConfig+0x100e>
 8001814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001818:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800181c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001826:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fa93 f2a3 	rbit	r2, r3
 8001830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001834:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001838:	601a      	str	r2, [r3, #0]
  return result;
 800183a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001842:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b3f      	cmp	r3, #63	@ 0x3f
 800184c:	d804      	bhi.n	8001858 <HAL_RCC_OscConfig+0xc70>
 800184e:	4b01      	ldr	r3, [pc, #4]	@ (8001854 <HAL_RCC_OscConfig+0xc6c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	e029      	b.n	80018a8 <HAL_RCC_OscConfig+0xcc0>
 8001854:	40021000 	.word	0x40021000
 8001858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001860:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001864:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800186a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	fa93 f2a3 	rbit	r2, r3
 8001874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001878:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001882:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001886:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001890:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	fa93 f2a3 	rbit	r2, r3
 800189a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	4bc3      	ldr	r3, [pc, #780]	@ (8001bb4 <HAL_RCC_OscConfig+0xfcc>)
 80018a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018ac:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80018b0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80018b4:	6011      	str	r1, [r2, #0]
 80018b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018ba:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	fa92 f1a2 	rbit	r1, r2
 80018c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018c8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80018cc:	6011      	str	r1, [r2, #0]
  return result;
 80018ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018d2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	fab2 f282 	clz	r2, r2
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f042 0220 	orr.w	r2, r2, #32
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f002 021f 	and.w	r2, r2, #31
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f202 	lsl.w	r2, r1, r2
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d185      	bne.n	8001800 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f4:	4baf      	ldr	r3, [pc, #700]	@ (8001bb4 <HAL_RCC_OscConfig+0xfcc>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001900:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800190c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	430b      	orrs	r3, r1
 8001916:	49a7      	ldr	r1, [pc, #668]	@ (8001bb4 <HAL_RCC_OscConfig+0xfcc>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
 800191c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001920:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001924:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	fa93 f2a3 	rbit	r2, r3
 8001938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001940:	601a      	str	r2, [r3, #0]
  return result;
 8001942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001946:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800194a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001956:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	461a      	mov	r2, r3
 800195e:	2301      	movs	r3, #1
 8001960:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7fe feb9 	bl	80006d8 <HAL_GetTick>
 8001966:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196a:	e009      	b.n	8001980 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196c:	f7fe feb4 	bl	80006d8 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e13a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x100e>
 8001980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001984:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001988:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800198c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001992:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fa93 f2a3 	rbit	r2, r3
 800199c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80019a4:	601a      	str	r2, [r3, #0]
  return result;
 80019a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019aa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80019ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80019b8:	d802      	bhi.n	80019c0 <HAL_RCC_OscConfig+0xdd8>
 80019ba:	4b7e      	ldr	r3, [pc, #504]	@ (8001bb4 <HAL_RCC_OscConfig+0xfcc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	e027      	b.n	8001a10 <HAL_RCC_OscConfig+0xe28>
 80019c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80019c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fa93 f2a3 	rbit	r2, r3
 80019dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ea:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80019ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fa93 f2a3 	rbit	r2, r3
 8001a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a06:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	4b69      	ldr	r3, [pc, #420]	@ (8001bb4 <HAL_RCC_OscConfig+0xfcc>)
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a14:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001a18:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a1c:	6011      	str	r1, [r2, #0]
 8001a1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a22:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	fa92 f1a2 	rbit	r1, r2
 8001a2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a30:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a34:	6011      	str	r1, [r2, #0]
  return result;
 8001a36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a3a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	fab2 f282 	clz	r2, r2
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	f042 0220 	orr.w	r2, r2, #32
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	f002 021f 	and.w	r2, r2, #31
 8001a50:	2101      	movs	r1, #1
 8001a52:	fa01 f202 	lsl.w	r2, r1, r2
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d087      	beq.n	800196c <HAL_RCC_OscConfig+0xd84>
 8001a5c:	e0ca      	b.n	8001bf4 <HAL_RCC_OscConfig+0x100c>
 8001a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a62:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001a66:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a70:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	fa93 f2a3 	rbit	r2, r3
 8001a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001a82:	601a      	str	r2, [r3, #0]
  return result;
 8001a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a88:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001a8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7fe fe18 	bl	80006d8 <HAL_GetTick>
 8001aa8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aae:	f7fe fe13 	bl	80006d8 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e099      	b.n	8001bf6 <HAL_RCC_OscConfig+0x100e>
 8001ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001aca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ae6:	601a      	str	r2, [r3, #0]
  return result;
 8001ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aec:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001af0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001afa:	d802      	bhi.n	8001b02 <HAL_RCC_OscConfig+0xf1a>
 8001afc:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb4 <HAL_RCC_OscConfig+0xfcc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	e027      	b.n	8001b52 <HAL_RCC_OscConfig+0xf6a>
 8001b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b06:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b14:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fa93 f2a3 	rbit	r2, r3
 8001b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b22:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001b30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	fa93 f2a3 	rbit	r2, r3
 8001b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b48:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <HAL_RCC_OscConfig+0xfcc>)
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b56:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001b5a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b5e:	6011      	str	r1, [r2, #0]
 8001b60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b64:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	fa92 f1a2 	rbit	r1, r2
 8001b6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b72:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001b76:	6011      	str	r1, [r2, #0]
  return result;
 8001b78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b7c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	fab2 f282 	clz	r2, r2
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f042 0220 	orr.w	r2, r2, #32
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	f002 021f 	and.w	r2, r2, #31
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f202 	lsl.w	r2, r1, r2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d187      	bne.n	8001aae <HAL_RCC_OscConfig+0xec6>
 8001b9e:	e029      	b.n	8001bf4 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d103      	bne.n	8001bb8 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e020      	b.n	8001bf6 <HAL_RCC_OscConfig+0x100e>
 8001bb4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <HAL_RCC_OscConfig+0x1018>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bc0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001bc4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d10b      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001bdc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b09e      	sub	sp, #120	@ 0x78
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e154      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b89      	ldr	r3, [pc, #548]	@ (8001e44 <HAL_RCC_ClockConfig+0x240>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d910      	bls.n	8001c4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b86      	ldr	r3, [pc, #536]	@ (8001e44 <HAL_RCC_ClockConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 0207 	bic.w	r2, r3, #7
 8001c32:	4984      	ldr	r1, [pc, #528]	@ (8001e44 <HAL_RCC_ClockConfig+0x240>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b82      	ldr	r3, [pc, #520]	@ (8001e44 <HAL_RCC_ClockConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e13c      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c58:	4b7b      	ldr	r3, [pc, #492]	@ (8001e48 <HAL_RCC_ClockConfig+0x244>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4978      	ldr	r1, [pc, #480]	@ (8001e48 <HAL_RCC_ClockConfig+0x244>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80cd 	beq.w	8001e12 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d137      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xec>
 8001c80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c84:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001c8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c98:	d802      	bhi.n	8001ca0 <HAL_RCC_ClockConfig+0x9c>
 8001c9a:	4b6b      	ldr	r3, [pc, #428]	@ (8001e48 <HAL_RCC_ClockConfig+0x244>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	e00f      	b.n	8001cc0 <HAL_RCC_ClockConfig+0xbc>
 8001ca0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	667b      	str	r3, [r7, #100]	@ 0x64
 8001cae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001cb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001cbc:	4b62      	ldr	r3, [pc, #392]	@ (8001e48 <HAL_RCC_ClockConfig+0x244>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cc4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001cc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001cc8:	fa92 f2a2 	rbit	r2, r2
 8001ccc:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001cce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001cd0:	fab2 f282 	clz	r2, r2
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	f042 0220 	orr.w	r2, r2, #32
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	f002 021f 	and.w	r2, r2, #31
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d171      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0ea      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d137      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x164>
 8001cf8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cfc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d10:	d802      	bhi.n	8001d18 <HAL_RCC_ClockConfig+0x114>
 8001d12:	4b4d      	ldr	r3, [pc, #308]	@ (8001e48 <HAL_RCC_ClockConfig+0x244>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	e00f      	b.n	8001d38 <HAL_RCC_ClockConfig+0x134>
 8001d18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d34:	4b44      	ldr	r3, [pc, #272]	@ (8001e48 <HAL_RCC_ClockConfig+0x244>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d3c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001d3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d40:	fa92 f2a2 	rbit	r2, r2
 8001d44:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d48:	fab2 f282 	clz	r2, r2
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	f042 0220 	orr.w	r2, r2, #32
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	f002 021f 	and.w	r2, r2, #31
 8001d58:	2101      	movs	r1, #1
 8001d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d135      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0ae      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x2c2>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d7e:	d802      	bhi.n	8001d86 <HAL_RCC_ClockConfig+0x182>
 8001d80:	4b31      	ldr	r3, [pc, #196]	@ (8001e48 <HAL_RCC_ClockConfig+0x244>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	e00d      	b.n	8001da2 <HAL_RCC_ClockConfig+0x19e>
 8001d86:	2302      	movs	r3, #2
 8001d88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d92:	2302      	movs	r3, #2
 8001d94:	623b      	str	r3, [r7, #32]
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e48 <HAL_RCC_ClockConfig+0x244>)
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	2202      	movs	r2, #2
 8001da4:	61ba      	str	r2, [r7, #24]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	fa92 f2a2 	rbit	r2, r2
 8001dac:	617a      	str	r2, [r7, #20]
  return result;
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	fab2 f282 	clz	r2, r2
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f042 0220 	orr.w	r2, r2, #32
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	f002 021f 	and.w	r2, r2, #31
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e07a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e48 <HAL_RCC_ClockConfig+0x244>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 0203 	bic.w	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	491a      	ldr	r1, [pc, #104]	@ (8001e48 <HAL_RCC_ClockConfig+0x244>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de2:	f7fe fc79 	bl	80006d8 <HAL_GetTick>
 8001de6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dea:	f7fe fc75 	bl	80006d8 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e062      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e00:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <HAL_RCC_ClockConfig+0x244>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 020c 	and.w	r2, r3, #12
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d1eb      	bne.n	8001dea <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e12:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <HAL_RCC_ClockConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d215      	bcs.n	8001e4c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <HAL_RCC_ClockConfig+0x240>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 0207 	bic.w	r2, r3, #7
 8001e28:	4906      	ldr	r1, [pc, #24]	@ (8001e44 <HAL_RCC_ClockConfig+0x240>)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <HAL_RCC_ClockConfig+0x240>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d006      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e041      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x2c2>
 8001e42:	bf00      	nop
 8001e44:	40022000 	.word	0x40022000
 8001e48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <HAL_RCC_ClockConfig+0x2cc>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	491a      	ldr	r1, [pc, #104]	@ (8001ed0 <HAL_RCC_ClockConfig+0x2cc>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e76:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <HAL_RCC_ClockConfig+0x2cc>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4912      	ldr	r1, [pc, #72]	@ (8001ed0 <HAL_RCC_ClockConfig+0x2cc>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e8a:	f000 f829 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001e8e:	4601      	mov	r1, r0
 8001e90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <HAL_RCC_ClockConfig+0x2cc>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e98:	22f0      	movs	r2, #240	@ 0xf0
 8001e9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	fa92 f2a2 	rbit	r2, r2
 8001ea2:	60fa      	str	r2, [r7, #12]
  return result;
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	fab2 f282 	clz	r2, r2
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	40d3      	lsrs	r3, r2
 8001eae:	4a09      	ldr	r2, [pc, #36]	@ (8001ed4 <HAL_RCC_ClockConfig+0x2d0>)
 8001eb0:	5cd3      	ldrb	r3, [r2, r3]
 8001eb2:	fa21 f303 	lsr.w	r3, r1, r3
 8001eb6:	4a08      	ldr	r2, [pc, #32]	@ (8001ed8 <HAL_RCC_ClockConfig+0x2d4>)
 8001eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <HAL_RCC_ClockConfig+0x2d8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fbc6 	bl	8000650 <HAL_InitTick>
  
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3778      	adds	r7, #120	@ 0x78
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	0800338c 	.word	0x0800338c
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000004 	.word	0x20000004

08001ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001efa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d002      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x30>
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_GetSysClockFreq+0x36>
 8001f0e:	e026      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f10:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f12:	613b      	str	r3, [r7, #16]
      break;
 8001f14:	e026      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	0c9b      	lsrs	r3, r3, #18
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	4a17      	ldr	r2, [pc, #92]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
 8001f22:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001f24:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	4a14      	ldr	r2, [pc, #80]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
 8001f30:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	fb02 f303 	mul.w	r3, r2, r3
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	e004      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a0c      	ldr	r2, [pc, #48]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	613b      	str	r3, [r7, #16]
      break;
 8001f5c:	e002      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f60:	613b      	str	r3, [r7, #16]
      break;
 8001f62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f64:	693b      	ldr	r3, [r7, #16]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	371c      	adds	r7, #28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	007a1200 	.word	0x007a1200
 8001f7c:	0800339c 	.word	0x0800339c
 8001f80:	080033ac 	.word	0x080033ac
 8001f84:	003d0900 	.word	0x003d0900

08001f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b092      	sub	sp, #72	@ 0x48
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80d2 	beq.w	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fac:	4b4d      	ldr	r3, [pc, #308]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10e      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	4a49      	ldr	r2, [pc, #292]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	61d3      	str	r3, [r2, #28]
 8001fc4:	4b47      	ldr	r3, [pc, #284]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd6:	4b44      	ldr	r3, [pc, #272]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d118      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe2:	4b41      	ldr	r3, [pc, #260]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a40      	ldr	r2, [pc, #256]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fee:	f7fe fb73 	bl	80006d8 <HAL_GetTick>
 8001ff2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	e008      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff6:	f7fe fb6f 	bl	80006d8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b64      	cmp	r3, #100	@ 0x64
 8002002:	d901      	bls.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e149      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x314>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	4b37      	ldr	r3, [pc, #220]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002014:	4b33      	ldr	r3, [pc, #204]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800201c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800201e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8082 	beq.w	800212a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800202e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002030:	429a      	cmp	r2, r3
 8002032:	d07a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002034:	4b2b      	ldr	r3, [pc, #172]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800203c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800203e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002042:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800204c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	4b25      	ldr	r3, [pc, #148]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	461a      	mov	r2, r3
 800205e:	2301      	movs	r3, #1
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002066:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	4b1c      	ldr	r3, [pc, #112]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	461a      	mov	r2, r3
 8002082:	2300      	movs	r3, #0
 8002084:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002086:	4a17      	ldr	r2, [pc, #92]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800208a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800208c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d049      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7fe fb1f 	bl	80006d8 <HAL_GetTick>
 800209a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209c:	e00a      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7fe fb1b 	bl	80006d8 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0f3      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x314>
 80020b4:	2302      	movs	r3, #2
 80020b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c0:	2302      	movs	r3, #2
 80020c2:	623b      	str	r3, [r7, #32]
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	61fb      	str	r3, [r7, #28]
  return result;
 80020cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d108      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80020de:	4b01      	ldr	r3, [pc, #4]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	e00d      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40007000 	.word	0x40007000
 80020ec:	10908100 	.word	0x10908100
 80020f0:	2302      	movs	r3, #2
 80020f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	4b69      	ldr	r3, [pc, #420]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80020fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002100:	2202      	movs	r2, #2
 8002102:	613a      	str	r2, [r7, #16]
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	fa92 f2a2 	rbit	r2, r2
 800210a:	60fa      	str	r2, [r7, #12]
  return result;
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	fab2 f282 	clz	r2, r2
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	f002 021f 	and.w	r2, r2, #31
 800211e:	2101      	movs	r1, #1
 8002120:	fa01 f202 	lsl.w	r2, r1, r2
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0b9      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800212a:	4b5e      	ldr	r3, [pc, #376]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	495b      	ldr	r1, [pc, #364]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002138:	4313      	orrs	r3, r2
 800213a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800213c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002144:	4b57      	ldr	r3, [pc, #348]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	4a56      	ldr	r2, [pc, #344]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800214a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800214e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800215c:	4b51      	ldr	r3, [pc, #324]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	f023 0203 	bic.w	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	494e      	ldr	r1, [pc, #312]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800216a:	4313      	orrs	r3, r2
 800216c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b00      	cmp	r3, #0
 8002178:	d008      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800217a:	4b4a      	ldr	r3, [pc, #296]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f023 0210 	bic.w	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	4947      	ldr	r1, [pc, #284]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002188:	4313      	orrs	r3, r2
 800218a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002198:	4b42      	ldr	r3, [pc, #264]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a4:	493f      	ldr	r1, [pc, #252]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021b6:	4b3b      	ldr	r3, [pc, #236]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f023 0220 	bic.w	r2, r3, #32
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	4938      	ldr	r1, [pc, #224]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021d4:	4b33      	ldr	r3, [pc, #204]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	4930      	ldr	r1, [pc, #192]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021f2:	4b2c      	ldr	r3, [pc, #176]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4929      	ldr	r1, [pc, #164]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002210:	4b24      	ldr	r3, [pc, #144]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002214:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	4921      	ldr	r1, [pc, #132]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800221e:	4313      	orrs	r3, r2
 8002220:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800222e:	4b1d      	ldr	r3, [pc, #116]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	491a      	ldr	r1, [pc, #104]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800223c:	4313      	orrs	r3, r2
 800223e:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800224c:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002250:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	4912      	ldr	r1, [pc, #72]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800225a:	4313      	orrs	r3, r2
 800225c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800226a:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002276:	490b      	ldr	r1, [pc, #44]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002278:	4313      	orrs	r3, r2
 800227a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002294:	4903      	ldr	r1, [pc, #12]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002296:	4313      	orrs	r3, r2
 8002298:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3748      	adds	r7, #72	@ 0x48
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000

080022a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e049      	b.n	800234e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7fe f8e4 	bl	800049c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	f000 fb5a 	bl	80029a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e049      	b.n	80023fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d106      	bne.n	8002382 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f841 	bl	8002404 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	4619      	mov	r1, r3
 8002394:	4610      	mov	r0, r2
 8002396:	f000 fb03 	bl	80029a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d109      	bne.n	800243c <HAL_TIM_PWM_Start+0x24>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	e03c      	b.n	80024b6 <HAL_TIM_PWM_Start+0x9e>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b04      	cmp	r3, #4
 8002440:	d109      	bne.n	8002456 <HAL_TIM_PWM_Start+0x3e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	bf14      	ite	ne
 800244e:	2301      	movne	r3, #1
 8002450:	2300      	moveq	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	e02f      	b.n	80024b6 <HAL_TIM_PWM_Start+0x9e>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b08      	cmp	r3, #8
 800245a:	d109      	bne.n	8002470 <HAL_TIM_PWM_Start+0x58>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	bf14      	ite	ne
 8002468:	2301      	movne	r3, #1
 800246a:	2300      	moveq	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	e022      	b.n	80024b6 <HAL_TIM_PWM_Start+0x9e>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d109      	bne.n	800248a <HAL_TIM_PWM_Start+0x72>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	bf14      	ite	ne
 8002482:	2301      	movne	r3, #1
 8002484:	2300      	moveq	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	e015      	b.n	80024b6 <HAL_TIM_PWM_Start+0x9e>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b10      	cmp	r3, #16
 800248e:	d109      	bne.n	80024a4 <HAL_TIM_PWM_Start+0x8c>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b01      	cmp	r3, #1
 800249a:	bf14      	ite	ne
 800249c:	2301      	movne	r3, #1
 800249e:	2300      	moveq	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	e008      	b.n	80024b6 <HAL_TIM_PWM_Start+0x9e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e083      	b.n	80025c6 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d104      	bne.n	80024ce <HAL_TIM_PWM_Start+0xb6>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024cc:	e023      	b.n	8002516 <HAL_TIM_PWM_Start+0xfe>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d104      	bne.n	80024de <HAL_TIM_PWM_Start+0xc6>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024dc:	e01b      	b.n	8002516 <HAL_TIM_PWM_Start+0xfe>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d104      	bne.n	80024ee <HAL_TIM_PWM_Start+0xd6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024ec:	e013      	b.n	8002516 <HAL_TIM_PWM_Start+0xfe>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b0c      	cmp	r3, #12
 80024f2:	d104      	bne.n	80024fe <HAL_TIM_PWM_Start+0xe6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80024fc:	e00b      	b.n	8002516 <HAL_TIM_PWM_Start+0xfe>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b10      	cmp	r3, #16
 8002502:	d104      	bne.n	800250e <HAL_TIM_PWM_Start+0xf6>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800250c:	e003      	b.n	8002516 <HAL_TIM_PWM_Start+0xfe>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2202      	movs	r2, #2
 8002512:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2201      	movs	r2, #1
 800251c:	6839      	ldr	r1, [r7, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fdf8 	bl	8003114 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a29      	ldr	r2, [pc, #164]	@ (80025d0 <HAL_TIM_PWM_Start+0x1b8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00e      	beq.n	800254c <HAL_TIM_PWM_Start+0x134>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a28      	ldr	r2, [pc, #160]	@ (80025d4 <HAL_TIM_PWM_Start+0x1bc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d009      	beq.n	800254c <HAL_TIM_PWM_Start+0x134>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a26      	ldr	r2, [pc, #152]	@ (80025d8 <HAL_TIM_PWM_Start+0x1c0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d004      	beq.n	800254c <HAL_TIM_PWM_Start+0x134>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a25      	ldr	r2, [pc, #148]	@ (80025dc <HAL_TIM_PWM_Start+0x1c4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d101      	bne.n	8002550 <HAL_TIM_PWM_Start+0x138>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_TIM_PWM_Start+0x13a>
 8002550:	2300      	movs	r3, #0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002564:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a19      	ldr	r2, [pc, #100]	@ (80025d0 <HAL_TIM_PWM_Start+0x1b8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d009      	beq.n	8002584 <HAL_TIM_PWM_Start+0x16c>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002578:	d004      	beq.n	8002584 <HAL_TIM_PWM_Start+0x16c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a15      	ldr	r2, [pc, #84]	@ (80025d4 <HAL_TIM_PWM_Start+0x1bc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d115      	bne.n	80025b0 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	4b15      	ldr	r3, [pc, #84]	@ (80025e0 <HAL_TIM_PWM_Start+0x1c8>)
 800258c:	4013      	ands	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b06      	cmp	r3, #6
 8002594:	d015      	beq.n	80025c2 <HAL_TIM_PWM_Start+0x1aa>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800259c:	d011      	beq.n	80025c2 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0201 	orr.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ae:	e008      	b.n	80025c2 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e000      	b.n	80025c4 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40012c00 	.word	0x40012c00
 80025d4:	40014000 	.word	0x40014000
 80025d8:	40014400 	.word	0x40014400
 80025dc:	40014800 	.word	0x40014800
 80025e0:	00010007 	.word	0x00010007

080025e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025fe:	2302      	movs	r3, #2
 8002600:	e0ff      	b.n	8002802 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b14      	cmp	r3, #20
 800260e:	f200 80f0 	bhi.w	80027f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002612:	a201      	add	r2, pc, #4	@ (adr r2, 8002618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002618:	0800266d 	.word	0x0800266d
 800261c:	080027f3 	.word	0x080027f3
 8002620:	080027f3 	.word	0x080027f3
 8002624:	080027f3 	.word	0x080027f3
 8002628:	080026ad 	.word	0x080026ad
 800262c:	080027f3 	.word	0x080027f3
 8002630:	080027f3 	.word	0x080027f3
 8002634:	080027f3 	.word	0x080027f3
 8002638:	080026ef 	.word	0x080026ef
 800263c:	080027f3 	.word	0x080027f3
 8002640:	080027f3 	.word	0x080027f3
 8002644:	080027f3 	.word	0x080027f3
 8002648:	0800272f 	.word	0x0800272f
 800264c:	080027f3 	.word	0x080027f3
 8002650:	080027f3 	.word	0x080027f3
 8002654:	080027f3 	.word	0x080027f3
 8002658:	08002771 	.word	0x08002771
 800265c:	080027f3 	.word	0x080027f3
 8002660:	080027f3 	.word	0x080027f3
 8002664:	080027f3 	.word	0x080027f3
 8002668:	080027b1 	.word	0x080027b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fa0e 	bl	8002a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0208 	orr.w	r2, r2, #8
 8002686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699a      	ldr	r2, [r3, #24]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0204 	bic.w	r2, r2, #4
 8002696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6999      	ldr	r1, [r3, #24]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	619a      	str	r2, [r3, #24]
      break;
 80026aa:	e0a5      	b.n	80027f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fa74 	bl	8002ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6999      	ldr	r1, [r3, #24]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	021a      	lsls	r2, r3, #8
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	619a      	str	r2, [r3, #24]
      break;
 80026ec:	e084      	b.n	80027f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 fad3 	bl	8002ca0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0208 	orr.w	r2, r2, #8
 8002708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69da      	ldr	r2, [r3, #28]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0204 	bic.w	r2, r2, #4
 8002718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69d9      	ldr	r1, [r3, #28]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	61da      	str	r2, [r3, #28]
      break;
 800272c:	e064      	b.n	80027f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fb31 	bl	8002d9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69da      	ldr	r2, [r3, #28]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69da      	ldr	r2, [r3, #28]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69d9      	ldr	r1, [r3, #28]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	021a      	lsls	r2, r3, #8
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	61da      	str	r2, [r3, #28]
      break;
 800276e:	e043      	b.n	80027f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fb74 	bl	8002e64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0208 	orr.w	r2, r2, #8
 800278a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0204 	bic.w	r2, r2, #4
 800279a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80027ae:	e023      	b.n	80027f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fbb2 	bl	8002f20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	021a      	lsls	r2, r3, #8
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80027f0:	e002      	b.n	80027f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	75fb      	strb	r3, [r7, #23]
      break;
 80027f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002800:	7dfb      	ldrb	r3, [r7, #23]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop

0800280c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_TIM_ConfigClockSource+0x1c>
 8002824:	2302      	movs	r3, #2
 8002826:	e0b6      	b.n	8002996 <HAL_TIM_ConfigClockSource+0x18a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002846:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800284a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002864:	d03e      	beq.n	80028e4 <HAL_TIM_ConfigClockSource+0xd8>
 8002866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800286a:	f200 8087 	bhi.w	800297c <HAL_TIM_ConfigClockSource+0x170>
 800286e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002872:	f000 8086 	beq.w	8002982 <HAL_TIM_ConfigClockSource+0x176>
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800287a:	d87f      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x170>
 800287c:	2b70      	cmp	r3, #112	@ 0x70
 800287e:	d01a      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0xaa>
 8002880:	2b70      	cmp	r3, #112	@ 0x70
 8002882:	d87b      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x170>
 8002884:	2b60      	cmp	r3, #96	@ 0x60
 8002886:	d050      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x11e>
 8002888:	2b60      	cmp	r3, #96	@ 0x60
 800288a:	d877      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x170>
 800288c:	2b50      	cmp	r3, #80	@ 0x50
 800288e:	d03c      	beq.n	800290a <HAL_TIM_ConfigClockSource+0xfe>
 8002890:	2b50      	cmp	r3, #80	@ 0x50
 8002892:	d873      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x170>
 8002894:	2b40      	cmp	r3, #64	@ 0x40
 8002896:	d058      	beq.n	800294a <HAL_TIM_ConfigClockSource+0x13e>
 8002898:	2b40      	cmp	r3, #64	@ 0x40
 800289a:	d86f      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x170>
 800289c:	2b30      	cmp	r3, #48	@ 0x30
 800289e:	d064      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x15e>
 80028a0:	2b30      	cmp	r3, #48	@ 0x30
 80028a2:	d86b      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x170>
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d060      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x15e>
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d867      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x170>
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d05c      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x15e>
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	d05a      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x15e>
 80028b4:	e062      	b.n	800297c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028c6:	f000 fc05 	bl	80030d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	609a      	str	r2, [r3, #8]
      break;
 80028e2:	e04f      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028f4:	f000 fbee 	bl	80030d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002906:	609a      	str	r2, [r3, #8]
      break;
 8002908:	e03c      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002916:	461a      	mov	r2, r3
 8002918:	f000 fb62 	bl	8002fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2150      	movs	r1, #80	@ 0x50
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fbbb 	bl	800309e <TIM_ITRx_SetConfig>
      break;
 8002928:	e02c      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002936:	461a      	mov	r2, r3
 8002938:	f000 fb81 	bl	800303e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2160      	movs	r1, #96	@ 0x60
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fbab 	bl	800309e <TIM_ITRx_SetConfig>
      break;
 8002948:	e01c      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002956:	461a      	mov	r2, r3
 8002958:	f000 fb42 	bl	8002fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2140      	movs	r1, #64	@ 0x40
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fb9b 	bl	800309e <TIM_ITRx_SetConfig>
      break;
 8002968:	e00c      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4619      	mov	r1, r3
 8002974:	4610      	mov	r0, r2
 8002976:	f000 fb92 	bl	800309e <TIM_ITRx_SetConfig>
      break;
 800297a:	e003      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
      break;
 8002980:	e000      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a34      	ldr	r2, [pc, #208]	@ (8002a84 <TIM_Base_SetConfig+0xe4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d003      	beq.n	80029c0 <TIM_Base_SetConfig+0x20>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029be:	d108      	bne.n	80029d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a84 <TIM_Base_SetConfig+0xe4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00f      	beq.n	80029fa <TIM_Base_SetConfig+0x5a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e0:	d00b      	beq.n	80029fa <TIM_Base_SetConfig+0x5a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a28      	ldr	r2, [pc, #160]	@ (8002a88 <TIM_Base_SetConfig+0xe8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d007      	beq.n	80029fa <TIM_Base_SetConfig+0x5a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a27      	ldr	r2, [pc, #156]	@ (8002a8c <TIM_Base_SetConfig+0xec>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d003      	beq.n	80029fa <TIM_Base_SetConfig+0x5a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a26      	ldr	r2, [pc, #152]	@ (8002a90 <TIM_Base_SetConfig+0xf0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d108      	bne.n	8002a0c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a14      	ldr	r2, [pc, #80]	@ (8002a84 <TIM_Base_SetConfig+0xe4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00b      	beq.n	8002a50 <TIM_Base_SetConfig+0xb0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a13      	ldr	r2, [pc, #76]	@ (8002a88 <TIM_Base_SetConfig+0xe8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d007      	beq.n	8002a50 <TIM_Base_SetConfig+0xb0>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a12      	ldr	r2, [pc, #72]	@ (8002a8c <TIM_Base_SetConfig+0xec>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d003      	beq.n	8002a50 <TIM_Base_SetConfig+0xb0>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <TIM_Base_SetConfig+0xf0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d103      	bne.n	8002a58 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d105      	bne.n	8002a76 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f023 0201 	bic.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]
  }
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40012c00 	.word	0x40012c00
 8002a88:	40014000 	.word	0x40014000
 8002a8c:	40014400 	.word	0x40014400
 8002a90:	40014800 	.word	0x40014800

08002a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f023 0201 	bic.w	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0303 	bic.w	r3, r3, #3
 8002ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f023 0302 	bic.w	r3, r3, #2
 8002ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a28      	ldr	r2, [pc, #160]	@ (8002b90 <TIM_OC1_SetConfig+0xfc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00b      	beq.n	8002b0c <TIM_OC1_SetConfig+0x78>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a27      	ldr	r2, [pc, #156]	@ (8002b94 <TIM_OC1_SetConfig+0x100>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d007      	beq.n	8002b0c <TIM_OC1_SetConfig+0x78>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a26      	ldr	r2, [pc, #152]	@ (8002b98 <TIM_OC1_SetConfig+0x104>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d003      	beq.n	8002b0c <TIM_OC1_SetConfig+0x78>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a25      	ldr	r2, [pc, #148]	@ (8002b9c <TIM_OC1_SetConfig+0x108>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d10c      	bne.n	8002b26 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f023 0308 	bic.w	r3, r3, #8
 8002b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f023 0304 	bic.w	r3, r3, #4
 8002b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a19      	ldr	r2, [pc, #100]	@ (8002b90 <TIM_OC1_SetConfig+0xfc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00b      	beq.n	8002b46 <TIM_OC1_SetConfig+0xb2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a18      	ldr	r2, [pc, #96]	@ (8002b94 <TIM_OC1_SetConfig+0x100>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d007      	beq.n	8002b46 <TIM_OC1_SetConfig+0xb2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a17      	ldr	r2, [pc, #92]	@ (8002b98 <TIM_OC1_SetConfig+0x104>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d003      	beq.n	8002b46 <TIM_OC1_SetConfig+0xb2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a16      	ldr	r2, [pc, #88]	@ (8002b9c <TIM_OC1_SetConfig+0x108>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d111      	bne.n	8002b6a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	621a      	str	r2, [r3, #32]
}
 8002b84:	bf00      	nop
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40014000 	.word	0x40014000
 8002b98:	40014400 	.word	0x40014400
 8002b9c:	40014800 	.word	0x40014800

08002ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f023 0210 	bic.w	r2, r3, #16
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f023 0320 	bic.w	r3, r3, #32
 8002bee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a24      	ldr	r2, [pc, #144]	@ (8002c90 <TIM_OC2_SetConfig+0xf0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d10d      	bne.n	8002c20 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a1b      	ldr	r2, [pc, #108]	@ (8002c90 <TIM_OC2_SetConfig+0xf0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00b      	beq.n	8002c40 <TIM_OC2_SetConfig+0xa0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002c94 <TIM_OC2_SetConfig+0xf4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d007      	beq.n	8002c40 <TIM_OC2_SetConfig+0xa0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a19      	ldr	r2, [pc, #100]	@ (8002c98 <TIM_OC2_SetConfig+0xf8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d003      	beq.n	8002c40 <TIM_OC2_SetConfig+0xa0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a18      	ldr	r2, [pc, #96]	@ (8002c9c <TIM_OC2_SetConfig+0xfc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d113      	bne.n	8002c68 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c46:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c4e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	621a      	str	r2, [r3, #32]
}
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40014000 	.word	0x40014000
 8002c98:	40014400 	.word	0x40014400
 8002c9c:	40014800 	.word	0x40014800

08002ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0303 	bic.w	r3, r3, #3
 8002cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a23      	ldr	r2, [pc, #140]	@ (8002d8c <TIM_OC3_SetConfig+0xec>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d10d      	bne.n	8002d1e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d1c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1a      	ldr	r2, [pc, #104]	@ (8002d8c <TIM_OC3_SetConfig+0xec>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00b      	beq.n	8002d3e <TIM_OC3_SetConfig+0x9e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a19      	ldr	r2, [pc, #100]	@ (8002d90 <TIM_OC3_SetConfig+0xf0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <TIM_OC3_SetConfig+0x9e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a18      	ldr	r2, [pc, #96]	@ (8002d94 <TIM_OC3_SetConfig+0xf4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <TIM_OC3_SetConfig+0x9e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a17      	ldr	r2, [pc, #92]	@ (8002d98 <TIM_OC3_SetConfig+0xf8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d113      	bne.n	8002d66 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	621a      	str	r2, [r3, #32]
}
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40014000 	.word	0x40014000
 8002d94:	40014400 	.word	0x40014400
 8002d98:	40014800 	.word	0x40014800

08002d9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002dea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	031b      	lsls	r3, r3, #12
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a16      	ldr	r2, [pc, #88]	@ (8002e54 <TIM_OC4_SetConfig+0xb8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <TIM_OC4_SetConfig+0x7c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a15      	ldr	r2, [pc, #84]	@ (8002e58 <TIM_OC4_SetConfig+0xbc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <TIM_OC4_SetConfig+0x7c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a14      	ldr	r2, [pc, #80]	@ (8002e5c <TIM_OC4_SetConfig+0xc0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_OC4_SetConfig+0x7c>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a13      	ldr	r2, [pc, #76]	@ (8002e60 <TIM_OC4_SetConfig+0xc4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d109      	bne.n	8002e2c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	019b      	lsls	r3, r3, #6
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	621a      	str	r2, [r3, #32]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40012c00 	.word	0x40012c00
 8002e58:	40014000 	.word	0x40014000
 8002e5c:	40014400 	.word	0x40014400
 8002e60:	40014800 	.word	0x40014800

08002e64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002ea8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a15      	ldr	r2, [pc, #84]	@ (8002f10 <TIM_OC5_SetConfig+0xac>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00b      	beq.n	8002ed6 <TIM_OC5_SetConfig+0x72>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a14      	ldr	r2, [pc, #80]	@ (8002f14 <TIM_OC5_SetConfig+0xb0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d007      	beq.n	8002ed6 <TIM_OC5_SetConfig+0x72>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a13      	ldr	r2, [pc, #76]	@ (8002f18 <TIM_OC5_SetConfig+0xb4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d003      	beq.n	8002ed6 <TIM_OC5_SetConfig+0x72>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a12      	ldr	r2, [pc, #72]	@ (8002f1c <TIM_OC5_SetConfig+0xb8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d109      	bne.n	8002eea <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002edc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	621a      	str	r2, [r3, #32]
}
 8002f04:	bf00      	nop
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40014000 	.word	0x40014000
 8002f18:	40014400 	.word	0x40014400
 8002f1c:	40014800 	.word	0x40014800

08002f20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	051b      	lsls	r3, r3, #20
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a16      	ldr	r2, [pc, #88]	@ (8002fd0 <TIM_OC6_SetConfig+0xb0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00b      	beq.n	8002f94 <TIM_OC6_SetConfig+0x74>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a15      	ldr	r2, [pc, #84]	@ (8002fd4 <TIM_OC6_SetConfig+0xb4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d007      	beq.n	8002f94 <TIM_OC6_SetConfig+0x74>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a14      	ldr	r2, [pc, #80]	@ (8002fd8 <TIM_OC6_SetConfig+0xb8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_OC6_SetConfig+0x74>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a13      	ldr	r2, [pc, #76]	@ (8002fdc <TIM_OC6_SetConfig+0xbc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d109      	bne.n	8002fa8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	029b      	lsls	r3, r3, #10
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	621a      	str	r2, [r3, #32]
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40014000 	.word	0x40014000
 8002fd8:	40014400 	.word	0x40014400
 8002fdc:	40014800 	.word	0x40014800

08002fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f023 0201 	bic.w	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800300a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f023 030a 	bic.w	r3, r3, #10
 800301c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	621a      	str	r2, [r3, #32]
}
 8003032:	bf00      	nop
 8003034:	371c      	adds	r7, #28
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800303e:	b480      	push	{r7}
 8003040:	b087      	sub	sp, #28
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f023 0210 	bic.w	r2, r3, #16
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	031b      	lsls	r3, r3, #12
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800307a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	621a      	str	r2, [r3, #32]
}
 8003092:	bf00      	nop
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800309e:	b480      	push	{r7}
 80030a0:	b085      	sub	sp, #20
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f043 0307 	orr.w	r3, r3, #7
 80030c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	609a      	str	r2, [r3, #8]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	021a      	lsls	r2, r3, #8
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	609a      	str	r2, [r3, #8]
}
 8003108:	bf00      	nop
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2201      	movs	r2, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a1a      	ldr	r2, [r3, #32]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	43db      	mvns	r3, r3
 8003136:	401a      	ands	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a1a      	ldr	r2, [r3, #32]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	fa01 f303 	lsl.w	r3, r1, r3
 800314c:	431a      	orrs	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	621a      	str	r2, [r3, #32]
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003174:	2302      	movs	r3, #2
 8003176:	e04f      	b.n	8003218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a21      	ldr	r2, [pc, #132]	@ (8003224 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d108      	bne.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80031a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a14      	ldr	r2, [pc, #80]	@ (8003224 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d009      	beq.n	80031ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e0:	d004      	beq.n	80031ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a10      	ldr	r2, [pc, #64]	@ (8003228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d10c      	bne.n	8003206 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40014000 	.word	0x40014000

0800322c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003244:	2302      	movs	r3, #2
 8003246:	e060      	b.n	800330a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	041b      	lsls	r3, r3, #16
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a14      	ldr	r2, [pc, #80]	@ (8003318 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d115      	bne.n	80032f8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	051b      	lsls	r3, r3, #20
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40012c00 	.word	0x40012c00

0800331c <memset>:
 800331c:	4402      	add	r2, r0
 800331e:	4603      	mov	r3, r0
 8003320:	4293      	cmp	r3, r2
 8003322:	d100      	bne.n	8003326 <memset+0xa>
 8003324:	4770      	bx	lr
 8003326:	f803 1b01 	strb.w	r1, [r3], #1
 800332a:	e7f9      	b.n	8003320 <memset+0x4>

0800332c <__libc_init_array>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	4d0d      	ldr	r5, [pc, #52]	@ (8003364 <__libc_init_array+0x38>)
 8003330:	4c0d      	ldr	r4, [pc, #52]	@ (8003368 <__libc_init_array+0x3c>)
 8003332:	1b64      	subs	r4, r4, r5
 8003334:	10a4      	asrs	r4, r4, #2
 8003336:	2600      	movs	r6, #0
 8003338:	42a6      	cmp	r6, r4
 800333a:	d109      	bne.n	8003350 <__libc_init_array+0x24>
 800333c:	4d0b      	ldr	r5, [pc, #44]	@ (800336c <__libc_init_array+0x40>)
 800333e:	4c0c      	ldr	r4, [pc, #48]	@ (8003370 <__libc_init_array+0x44>)
 8003340:	f000 f818 	bl	8003374 <_init>
 8003344:	1b64      	subs	r4, r4, r5
 8003346:	10a4      	asrs	r4, r4, #2
 8003348:	2600      	movs	r6, #0
 800334a:	42a6      	cmp	r6, r4
 800334c:	d105      	bne.n	800335a <__libc_init_array+0x2e>
 800334e:	bd70      	pop	{r4, r5, r6, pc}
 8003350:	f855 3b04 	ldr.w	r3, [r5], #4
 8003354:	4798      	blx	r3
 8003356:	3601      	adds	r6, #1
 8003358:	e7ee      	b.n	8003338 <__libc_init_array+0xc>
 800335a:	f855 3b04 	ldr.w	r3, [r5], #4
 800335e:	4798      	blx	r3
 8003360:	3601      	adds	r6, #1
 8003362:	e7f2      	b.n	800334a <__libc_init_array+0x1e>
 8003364:	080033bc 	.word	0x080033bc
 8003368:	080033bc 	.word	0x080033bc
 800336c:	080033bc 	.word	0x080033bc
 8003370:	080033c0 	.word	0x080033c0

08003374 <_init>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	bf00      	nop
 8003378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337a:	bc08      	pop	{r3}
 800337c:	469e      	mov	lr, r3
 800337e:	4770      	bx	lr

08003380 <_fini>:
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003382:	bf00      	nop
 8003384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003386:	bc08      	pop	{r3}
 8003388:	469e      	mov	lr, r3
 800338a:	4770      	bx	lr
